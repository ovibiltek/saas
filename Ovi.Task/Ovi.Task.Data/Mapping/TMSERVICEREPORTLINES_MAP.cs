using FluentNHibernate.Mapping;using Ovi.Task.Data.Entity;namespace Ovi.Task.Data.Mapping{    public sealed class TMSERVICEREPORTLINES_MAP : ClassMap<TMSERVICEREPORTLINES>    {        public TMSERVICEREPORTLINES_MAP()        {            CompositeId().KeyProperty(x => x.SRP_TSKID).KeyProperty(x => x.SRP_TSALINE);            Map(x => x.SRP_TSKORGANIZATION);            Map(x => x.SRP_TSKCUSTOMER);            Map(x => x.SRP_TSKCUSTOMERDESC);            Map(x => x.SRP_TSKCUSTOMERPM);            Map(x => x.SRP_TSKCUSTOMERPMCODE);            Map(x => x.SRP_TSKCUSTOMERGROUP);            Map(x => x.SRP_TSKCUSTOMERCREATED);            Map(x => x.SRP_TSKBRANCH);            Map(x => x.SRP_TSKBRANCHDESC);            Map(x => x.SRP_TSKTYPE);            Map(x => x.SRP_TSKTASKTYPE);            Map(x => x.SRP_TSKCATEGORY);            Map(x => x.SRP_TSKCATEGORYDESC).ReadOnly().Formula("dbo.GetDesc('TMCATEGORIES','CAT_DESC', SRP_TSKCATEGORY, (SELECT c.CAT_DESC FROM TMCATEGORIES c WHERE c.CAT_CODE = SRP_TSKCATEGORY),:SessionContext.Language)");            Map(x => x.SRP_TSADEPARTMENT);
            Map(x => x.SRP_BRNREGION);            Map(x => x.SRP_BRNPROVINCE);            Map(x => x.SRP_ADSDESC);            Map(x => x.SRP_TSKCREATEDBY);            Map(x => x.SRP_TSKCREATED);            Map(x => x.SRP_TSKCOMPLETED);            Map(x => x.SRP_TSKCOMPLETEDMY);            Map(x => x.SRP_TSADESC);            Map(x => x.SRP_TSADATECOMPLETED);            Map(x => x.SRP_TSATRADE);            Map(x => x.SRP_TRADEISSUPP).ReadOnly().Formula("(SELECT CASE WHEN tt.TRD_SUPPLIER IS NOT NULL THEN '+' ELSE '-' END FROM TMTRADES tt where tt.TRD_CODE = SRP_TSATRADE)");            Map(x => x.SRP_TRDSUPPLIER);            Map(x => x.SRP_TSKPSPCODE);            Map(x => x.SRP_TSKPSPSTATUS);            Map(x => x.SRP_TSKPSPSTATUSDESC).ReadOnly().Formula("dbo.GetDesc('TMSTATUSES','STA_DESC', 'PROGRESSPAYMENT#' + SRP_TSKPSPSTATUS, (SELECT s.STA_DESC FROM TMSTATUSES s WHERE s.STA_CODE = SRP_TSKPSPSTATUS AND s.STA_ENTITY = 'PROGRESSPAYMENT'),:SessionContext.Language)");            Map(x => x.SRP_OPETIME);            Map(x => x.SRP_LABORCOST);            Map(x => x.SRP_LABORCALC);            Map(x => x.SRP_LABORPSP);            Map(x => x.SRP_SERVCALC);            Map(x => x.SRP_SERVPSP);            Map(x => x.SRP_MISCCOSTRECEIVE_PART);            Map(x => x.SRP_MISCCOSTSALES_PART);            Map(x => x.SRP_MISCCOSTPSP_PART);            Map(x => x.SRP_MISCCOSTRECEIVE_SERVICE);            Map(x => x.SRP_MISCCOSTSALES_SERVICE);            Map(x => x.SRP_MISCCOSTPSP_SERVICE);            Map(x => x.SRP_PARTRECEIVE);            Map(x => x.SRP_PARTPSP);            Map(x => x.SRP_TOTALCOST);            Map(x => x.SRP_TOTALPSP);            Map(x => x.SRP_SERVICECODERECEIVE);            Map(x => x.SRP_SERVICECODESALES);            Map(x => x.SRP_SERVICECODEPSP);            Map(x => x.SRP_EQUIPMENTRECEIVE);            Map(x => x.SRP_EQUIPMENTSALES);            Map(x => x.SRP_EQUIPMENTPSP);            Map(x => x.SRP_INVRETURN);        }    }}