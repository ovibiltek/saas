using FluentNHibernate.Mapping;using Ovi.Task.Data.Entity;namespace Ovi.Task.Data.Mapping{    public sealed class TMTIMEKEEPINGLINES_MAP : ClassMap<TMTIMEKEEPINGLINES>    {        public TMTIMEKEEPINGLINES_MAP()        {            Id(x => x.TKD_ID);            Map(x => x.TKD_TIMEKEEPING);            Map(x => x.TKD_USER);            Map(x => x.TKD_USERDESC).ReadOnly().Formula("(SELECT u.USR_DESC FROM TMUSERS u WHERE u.USR_CODE = TKD_USER)");            Map(x => x.TKD_DATE);            Map(x => x.TKD_SHIFT);            Map(x => x.TKD_SHIFTDESC).ReadOnly().Formula("(SELECT s.SHF_DESCRIPTION FROM TMSHIFTS s WHERE s.SHF_CODE = TKD_SHIFT)");            Map(x => x.TKD_EXCEPTION);            Map(x => x.TKD_MINSTART);            Map(x => x.TKD_MAXEND);            Map(x => x.TKD_DIFF);            Map(x => x.TKD_SUM);            Map(x => x.TKD_NORMAL);            Map(x => x.TKD_OVERTIME);            Map(x => x.TKD_TIMEONROUTE);            Map(x => x.TKD_STATUS);            Map(x => x.TKD_APPROVALLINE);            Map(x => x.TKD_APPROVER);            Map(x => x.TKD_APPROVERDESC).ReadOnly().Formula("(SELECT u.USR_DESC FROM TMUSERS u WHERE u.USR_CODE = TKD_APPROVER)");            Map(x => x.TKD_CREATED);            Map(x => x.TKD_CREATEDBY);            Map(x => x.TKD_UPDATED);            Map(x => x.TKD_UPDATEDBY);            Map(x => x.TKD_RECORDVERSION);            Map(x => x.TKD_CMNTCOUNT).ReadOnly().Formula("(SELECT COUNT(*) FROM TMCOMMENTS c WHERE c.CMN_SOURCE = TKD_ID AND c.CMN_SUBJECT = 'TKITEM' AND c.CMN_VISIBLETOCUSTOMER = CASE WHEN :SessionContext.Customer IS NOT NULL THEN '+' ELSE c.CMN_VISIBLETOCUSTOMER END " +                                                                                                                                                     "AND c.CMN_VISIBLETOSUPPLIER = CASE WHEN :SessionContext.Supplier IS NOT NULL THEN '+' ELSE c.CMN_VISIBLETOSUPPLIER END)");        }    }}