using FluentNHibernate.Mapping;using Ovi.Task.Data.Configuration;using Ovi.Task.Data.Entity;namespace Ovi.Task.Data.Mapping{    public sealed class TMTOOLS_MAP : ClassMap<TMTOOLS>    {        public TMTOOLS_MAP()        {            Id(x => x.TOO_CODE);            Map(x => x.TOO_DESCRIPTION).Length(PropertySettings.L250);            Map(x => x.TOO_ORGANIZATION).Length(PropertySettings.L50);            Map(x => x.TOO_ORGANIZATIONDESC).Formula("dbo.GetDesc('TMORGS','ORG_DESC', TOO_ORGANIZATION,(SELECT o.ORG_DESC FROM TMORGS o WHERE o.ORG_CODE = TOO_ORGANIZATION),:SessionContext.Language)");            Map(x => x.TOO_TYPE).Length(PropertySettings.L50);            Map(x => x.TOO_TYPEDESC).ReadOnly().Formula("dbo.GetSysCodeDescription('TOOLTYPE',TOO_TYPE,:SessionContext.Language)");            Map(x => x.TOO_CHARGINGPERIOD).Length(PropertySettings.L50);            Map(x => x.TOO_UNITPRICE);            Map(x => x.TOO_CURRENCY);            Map(x => x.TOO_CURRENCYDESC).ReadOnly().Length(PropertySettings.L250).ReadOnly().Formula("(SELECT c.CUR_DESC FROM TMCURRENCIES c WHERE c.CUR_CODE = TOO_CURRENCY)");            Map(x => x.TOO_ACTIVE);            Map(x => x.TOO_CREATED);            Map(x => x.TOO_CREATEDBY).Length(PropertySettings.L50);            Map(x => x.TOO_UPDATED);            Map(x => x.TOO_UPDATEDBY).Length(PropertySettings.L50);            Map(x => x.TOO_RECORDVERSION).Default("0");            Map(x => x.TOO_SQLIDENTITY).Generated.Insert();        }    }}