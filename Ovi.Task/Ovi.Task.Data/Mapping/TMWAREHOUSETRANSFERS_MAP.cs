using FluentNHibernate.Mapping;using Ovi.Task.Data.Configuration;using Ovi.Task.Data.Entity;namespace Ovi.Task.Data.Mapping{    public sealed class TMWAREHOUSETRANSFERS_MAP : ClassMap<TMWAREHOUSETRANSFERS>    {        public TMWAREHOUSETRANSFERS_MAP()        {
            Id(x => x.WTR_ID);            Map(x => x.WTR_ORG).Length(PropertySettings.L50);            Map(x => x.WTR_ORGDESC).ReadOnly().Formula("dbo.GetDesc('TMORGS','ORG_DESC', WTR_ORG,(SELECT o.ORG_DESC FROM TMORGS o WHERE o.ORG_CODE = WTR_ORG),:SessionContext.Language)");            Map(x => x.WTR_FROM).Length(PropertySettings.L50);            Map(x => x.WTR_FROMDESC).ReadOnly().Formula("dbo.GetDesc('TMWAREHOUSES','WAH_DESC', WTR_FROM, (SELECT w.WAH_DESC FROM TMWAREHOUSES w WHERE w.WAH_CODE = WTR_FROM), :SessionContext.Language)");            Map(x => x.WTR_FROMBIN).Length(PropertySettings.L50);            Map(x => x.WTR_FROMBINDESC).ReadOnly().Formula("(SELECT b.BIN_DESC FROM TMBINS b WHERE b.BIN_CODE = WTR_FROMBIN AND b.BIN_WAREHOUSE = WTR_FROM)");            Map(x => x.WTR_TO).Length(PropertySettings.L50);            Map(x => x.WTR_TODESC).ReadOnly().Formula("dbo.GetDesc('TMWAREHOUSES','WAH_DESC', WTR_TO, (SELECT w.WAH_DESC FROM TMWAREHOUSES w WHERE w.WAH_CODE = WTR_TO), :SessionContext.Language)");            Map(x => x.WTR_TOBIN).Length(PropertySettings.L50);            Map(x => x.WTR_TOBINDESC).ReadOnly().Formula("(SELECT b.BIN_DESC FROM TMBINS b WHERE b.BIN_CODE = WTR_TOBIN AND b.BIN_WAREHOUSE = WTR_TO)");                       Map(x => x.WTR_CURR);            Map(x => x.WTR_CURRDESC).Formula("dbo.GetDesc('TMCURRENCIES','CUR_DESC', WTR_CURR, (SELECT c.CUR_DESC FROM TMCURRENCIES c WHERE c.CUR_CODE = WTR_CURR), :SessionContext.Language)");            Map(x => x.WTR_CREATED);            Map(x => x.WTR_CREATEDBY).Length(PropertySettings.L50);            Map(x => x.WTR_UPDATED);            Map(x => x.WTR_UPDATEDBY).Length(PropertySettings.L50);            Map(x => x.WTR_RECORDVERSION).Default("0");            Map(x => x.WTR_DESCRIPTION);            Map(x => x.WTR_STATUSENTITY);            Map(x => x.WTR_STATUS);            Map(x => x.WTR_STATUSDESC).ReadOnly().Formula("(SELECT s.STA_DESC FROM TMSTATUSES s WHERE s.STA_CODE = WTR_STATUS AND s.STA_ENTITY = WTR_STATUSENTITY)");            Map(x => x.WTR_TYPE);            Map(x => x.WTR_TYPEENTITY);            Map(x => x.WTR_REQUESTEDBY);        }    }}